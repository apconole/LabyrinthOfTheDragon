#!/usr/bin/env node

const fs = require('fs');
const path = require('path')

try {
  console.log('Compiling table data...')
  const data = fs.readFileSync(path.resolve('assets/', 'tables.csv'))
  const lines = data.toString().replace(/\r/g, '').split('\n')
  const tables = []

  lines[0].split(',').forEach(name => {
    tables.push({ name, type: 'uint8_t', values: [] })
  });
  lines[1].split(',').forEach((type, i) => tables[i].type = type)

  for (let k = 2; k < 99 + 2; k++) {
    lines[k].split(',').forEach((value, i) => {
      tables[i].values.push(value)
    })
  }

  function isComposite(table) {
    const match = table.name.match(/^([a-z_]+)[_][abcs]$/);
    return match ? match[1] : false;
  }

  const flatTables = tables.filter(t => !isComposite(t));
  const compositeTables = new Map();

  tables.forEach(table => {
    const name = isComposite(table);
    if (!name) return;

    if (!compositeTables.has(name)) {
      compositeTables.set(name, {
        name,
        type: table.type,
        tables: [ table.values ]
      })
    } else {
      compositeTables.get(name).tables.push(table.values)
    }
  })

  const composites = Array.from(compositeTables.values())

  const header_file = [
    '/* tables.h - This file is automatically generated by the tables2c script */',
    '#ifndef _TABLES_H',
    '#define _TABLES_H',
    '',
    '#include <stdint.h>',
    '',
    '// Flat tables',
    flatTables.map(table => (
      `extern const ${table.type} ${table.name}[99];`
    )).join('\n'),
    '',
    '// Tier Composite Tables',
    composites.map(comp => (
      `extern const ${comp.type} ${comp.name}[4][99];`
    )).join('\n'),
    '',
    '#endif',
  ].join('\n')
  console.log(`Writing 'src/tables.h'`);
  fs.writeFileSync(path.join('src/', 'tables.h'), header_file);

  let bytes = 0;
  tables.forEach(table => {
    const b = table.type == 'uint8_t' ? 1 : 2;
    bytes += table.values.length * b
  })
  const sizeComment = `// Total: ~${Math.ceil(bytes/1024)} KB (${bytes} bytes)`;

  const c_file = [
    '/* tables.c - This file is automatically generated by the tables2c script */',
    '#pragma bank 3',
    '#include "tables.h"',
    '',
    sizeComment,
    '',
    '// Flat Tables',
    flatTables.map(table => (
      `const ${table.type} ${table.name}[] = { ${table.values.join(', ')}};`
    )).join('\n'),
    '',
    '// Tier composites',
    composites.map(comp => {
      const tableValues = comp.tables.map(table => {
        return `  {${table.join(', ')}},`
      }).join('\n')
      return [
        `const ${comp.type} ${comp.name}[4][${comp.tables[0].length}] = {`,
        tableValues,
        `};`
      ].join('\n')
    }).join('\n')
  ].join('\n')
  console.log(`Writing 'src/tables.c'`);
  fs.writeFileSync(path.join('src/', 'tables.c'), c_file);

  // console.log(`Tables size: ${Math.ceil(bytes/1024)} KB (${bytes} bytes)`);
} catch (err) {
  console.error(err);
  process.exit(1);
}
